networks:
  clients-app-network:
    driver: bridge

services:
  # Service: MongoDB database
  # Description: This service is used to run the MongoDB database that houses our data.
  mongodb:
    build:
      context: ./.docker/mongodb
    container_name: "${APP_NAME}-database"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
    networks:
      - ${APP_NAME}-network
    ports:
      - "27017:27017"
    restart: on-failure
    # keep the container running, see: https://stackoverflow.com/questions/44884719/exited-with-code-0-docker
    tty: true
    volumes:
      - ./.docker/mongodb/init.d:/docker-entrypoint-initdb.d/
      - ./.docker/mongodb/etc/mongod.conf:/etc/mongod.conf
      - ./.docker/mongodb/logs/mongod.log:/var/log/mongodb/mongod.log
      - db-data:/data/db

  # Service: OpenSSL
  # Description: This service is used to generate SSL certificates for our application.
  openssl:
    build:
      context: ./.docker/openssl
    container_name: "${APP_NAME}-openssl"
    networks:
      - ${APP_NAME}-network
    volumes:
      - clientsapp-certs-data:/etc/ssl/certs/clientsapp.local/

  # Service: Nginx webserver
  # Description: Nginx will be used as a reverse proxy to serve our application.
  webserver:
    build:
      context: ./.docker/nginx
    container_name: "${APP_NAME}-webserver"
    depends_on:
      - express
      - mongodb
      - openssl
      - app
    # Ports to be exposed
    ports:
      - "80:80"
      - "443:443"
      - "5173:5173"
      - "8080:8080"
      - "8443:8443"
    networks:
      - ${APP_NAME}-network
    volumes:
      # Files
      - ./.docker/nginx/etc/nginx.conf:/etc/nginx/nginx.conf
      # Directories
      - ./.docker/nginx/etc/conf.d/:/etc/nginx/conf.d/
      - ./.docker/nginx/etc/snippets/:/etc/nginx/snippets/
      - ./.docker/nginx/logs/:/var/log/nginx/
      - ./app/:/var/www/html/
      # Volumes
      - clientsapp-certs-data:/etc/ssl/certs/clientsapp.local/

  # Service: Express Server
  # Description: This service is used to run the Express Node.js server.
  express:
    build:
      context: ./api
    container_name: "${APP_NAME}-express"
    depends_on:
      - mongodb
    environment:
      # Node.js Express init variables
      - PORT=${EXPRESS_PORT}
      # MongoDB init variables
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=${MONGO_INITDB_DATABASE}
      # MongoDB variables
      - MONGO_DB=${MONGO_DB}
      - MONGO_HOST=${MONGO_HOST}
      - MONGO_PASS=${MONGO_PASS}
      - MONGO_PORT=${MONGO_PORT}
      - MONGO_USER=${MONGO_USER}
    networks:
      - ${APP_NAME}-network
    restart: on-failure
    volumes:
      - ./api:/usr/src/app
      - ./api/node_modules/:/usr/src/app/node_modules/
      - node_modules:/usr/src/app/node_modules/
      # Volumes
      - clientsapp-certs-data:/etc/ssl/certs/clientsapp.local/

  # Service: React App
  # Description: This service is used to run the React client.
  app:
    build:
      context: ./app
    container_name: "${APP_NAME}-app"
    environment:
      # Node.js Express init variables
      - PORT=${REACT_PORT}
    networks:
      - ${APP_NAME}-network
    restart: on-failure
    volumes:
      - ./app:/usr/src/app
      - ./app/node_modules/:/usr/src/app/node_modules/
      - app_node_modules:/usr/src/app/node_modules/

version: "3.9"

volumes:
  db-data:
    driver: local
  clientsapp-certs-data:
    driver: local
  node_modules:
    driver: local
  app_node_modules:
    driver: local